const User = require("../models/User")
const SiteToken = require("../models/SiteToken")
const GameTransaction = require("../models/GameTransaction")
const mongoose = require("mongoose")

class GameService {
  constructor() {
    this.maxWinMultiplier = Number.parseFloat(process.env.GAMES_MAX_WIN_MULTIPLIER) || 1.0
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserTokens(userId) {
    let userTokens = await SiteToken.findOne({ userId })

    if (!userTokens) {
      userTokens = new SiteToken({ userId })
      await userTokens.save()
    }

    return userTokens
  }

  // –î–µ–ø–æ–∑–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
  async depositTokens(userId, amount) {
    const userTokens = await this.getUserTokens(userId)

    userTokens.balance += amount
    userTokens.totalDeposited += amount
    userTokens.depositLimit = Math.max(userTokens.depositLimit, userTokens.totalDeposited)
    userTokens.wagerRequirement = userTokens.totalDeposited * 1 // –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ—Ç—ã–≥—Ä—ã—à–∞ 1x –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞

    await userTokens.save()

    return userTokens
  }

  // –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤
  async withdrawTokens(userId, amount) {
    const userTokens = await this.getUserTokens(userId)

    if (!userTokens.canWithdraw()) {
      throw new Error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –æ—Ç—ã–≥—Ä—ã—à—É")
    }

    if (amount > userTokens.balance) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    }

    userTokens.balance -= amount
    userTokens.totalWithdrawn += amount

    await userTokens.save()

    return userTokens
  }

  // –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É
  async playRoulette(userId, bet) {
    const userTokens = await this.getUserTokens(userId)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if (!userTokens.canPlayRoulette()) {
      const timeLeft = userTokens.getTimeUntilNextRoulette()
      throw new Error(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${Math.ceil(timeLeft / 60000)} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä—ã`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (bet.amount > userTokens.balance) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const result = this._generateRouletteResult()

    // –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    let winAmount = 0
    let isWin = false

    if (bet.type === "number" && bet.value === result.number) {
      winAmount = bet.amount * 35
      isWin = true
    } else if (bet.type === "color" && bet.value === result.color) {
      winAmount = bet.amount * 2
      isWin = true
    } else if (bet.type === "parity" && bet.value === result.parity) {
      winAmount = bet.amount * 2
      isWin = true
    } else if (bet.type === "range") {
      if (bet.value === "low" && result.number >= 1 && result.number <= 18) {
        winAmount = bet.amount * 2
        isWin = true
      } else if (bet.value === "high" && result.number >= 19 && result.number <= 36) {
        winAmount = bet.amount * 2
        isWin = true
      }
    } else if (bet.type === "dozen") {
      if (bet.value === "first" && result.number >= 1 && result.number <= 12) {
        winAmount = bet.amount * 3
        isWin = true
      } else if (bet.value === "second" && result.number >= 13 && result.number <= 24) {
        winAmount = bet.amount * 3
        isWin = true
      } else if (bet.value === "third" && result.number >= 25 && result.number <= 36) {
        winAmount = bet.amount * 3
        isWin = true
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    const maxWin = userTokens.depositLimit * this.maxWinMultiplier
    if (winAmount > maxWin) {
      winAmount = maxWin
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if (isWin) {
      userTokens.balance += winAmount - bet.amount
    } else {
      userTokens.balance -= bet.amount
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
    userTokens.lastRoulettePlay = new Date()

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç—ã–≥—Ä—ã—à–∞
    userTokens.wagerCompleted += bet.amount

    await userTokens.save()

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transaction = new GameTransaction({
      userId,
      gameType: "roulette",
      betAmount: bet.amount,
      winAmount: isWin ? winAmount : 0,
      multiplier: isWin ? winAmount / bet.amount : 0,
      bet,
      result,
      isWin,
      wagerContribution: bet.amount,
    })

    await transaction.save()

    return {
      result,
      winAmount: isWin ? winAmount : 0,
      isWin,
      newBalance: userTokens.balance,
      wagerProgress: {
        completed: userTokens.wagerCompleted,
        required: userTokens.wagerRequirement,
        percentage: (userTokens.wagerCompleted / userTokens.wagerRequirement) * 100,
      },
    }
  }

  // –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã
  async playSlots(userId, betAmount) {
    const userTokens = await this.getUserTokens(userId)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (betAmount > userTokens.balance) {
      throw new Error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const result = this._generateSlotsResult()

    // –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    const { winAmount, multiplier, isWin } = this._calculateSlotsWin(betAmount, result)

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞
    const maxWin = userTokens.depositLimit * this.maxWinMultiplier
    const finalWinAmount = Math.min(winAmount, maxWin)

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if (isWin) {
      userTokens.balance += finalWinAmount - betAmount
    } else {
      userTokens.balance -= betAmount
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç—ã–≥—Ä—ã—à–∞
    userTokens.wagerCompleted += betAmount

    await userTokens.save()

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transaction = new GameTransaction({
      userId,
      gameType: "slots",
      betAmount,
      winAmount: isWin ? finalWinAmount : 0,
      multiplier,
      bet: { amount: betAmount },
      result,
      isWin,
      wagerContribution: betAmount,
    })

    await transaction.save()

    return {
      result,
      winAmount: isWin ? finalWinAmount : 0,
      isWin,
      newBalance: userTokens.balance,
      wagerProgress: {
        completed: userTokens.wagerCompleted,
        required: userTokens.wagerRequirement,
        percentage: (userTokens.wagerCompleted / userTokens.wagerRequirement) * 100,
      },
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏
  _generateRouletteResult() {
    const number = Math.floor(Math.random() * 37) // 0-36

    let color = "green"
    if (number !== 0) {
      const redNumbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
      color = redNumbers.includes(number) ? "red" : "black"
    }

    const parity = number === 0 ? "zero" : number % 2 === 0 ? "even" : "odd"

    return { number, color, parity }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–æ—Ç–æ–≤
  _generateSlotsResult() {
    const symbols = ["üçí", "üçã", "üçä", "üçá", "üîî", "üíé", "7Ô∏è‚É£", "üé∞"]
    const reels = 3
    const result = []

    for (let i = 0; i < reels; i++) {
      const randomIndex = Math.floor(Math.random() * symbols.length)
      result.push(symbols[randomIndex])
    }

    return result
  }

  // –†–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –≤ —Å–ª–æ—Ç–∞—Ö
  _calculateSlotsWin(betAmount, result) {
    const [reel1, reel2, reel3] = result

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    if (reel1 === reel2 && reel2 === reel3) {
      // –í—Å–µ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      const multipliers = {
        "üçí": 10,
        "üçã": 15,
        "üçä": 20,
        "üçá": 25,
        "üîî": 40,
        "üíé": 100,
        "7Ô∏è‚É£": 200,
        "üé∞": 500,
      }

      const multiplier = multipliers[reel1] || 10
      return {
        winAmount: betAmount * multiplier,
        multiplier,
        isWin: true,
      }
    } else if (reel1 === reel2 || reel1 === reel3 || reel2 === reel3) {
      // –î–≤–∞ —Å–∏–º–≤–æ–ª–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      return {
        winAmount: betAmount * 2,
        multiplier: 2,
        isWin: true,
      }
    }

    // –ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    return {
      winAmount: 0,
      multiplier: 0,
      isWin: false,
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserGameHistory(userId, gameType = null, limit = 10) {
    const query = { userId }

    if (gameType) {
      query.gameType = gameType
    }

    const history = await GameTransaction.find(query).sort({ createdAt: -1 }).limit(limit)

    return history
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserGameStats(userId) {
    const userTokens = await this.getUserTokens(userId)

    const totalBets = await GameTransaction.countDocuments({ userId })
    const totalWagered = await GameTransaction.aggregate([
      { $match: { userId: new mongoose.Types.ObjectId(userId) } },
      { $group: { _id: null, total: { $sum: "$betAmount" } } },
    ])

    const totalWon = await GameTransaction.aggregate([
      { $match: { userId: new mongoose.Types.ObjectId(userId), isWin: true } },
      { $group: { _id: null, total: { $sum: "$winAmount" } } },
    ])

    return {
      balance: userTokens.balance,
      totalDeposited: userTokens.totalDeposited,
      totalWithdrawn: userTokens.totalWithdrawn,
      wagerProgress: {
        completed: userTokens.wagerCompleted,
        required: userTokens.wagerRequirement,
        percentage: (userTokens.wagerCompleted / userTokens.wagerRequirement) * 100,
      },
      canWithdraw: userTokens.canWithdraw(),
      withdrawableAmount: userTokens.getWithdrawableAmount(),
      totalBets,
      totalWagered: totalWagered[0]?.total || 0,
      totalWon: totalWon[0]?.total || 0,
      profit: (totalWon[0]?.total || 0) - (totalWagered[0]?.total || 0),
    }
  }
}

module.exports = new GameService()
