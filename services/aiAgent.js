const OpenAI = require("openai")
const User = require("../models/User")
const Transaction = require("../models/Transaction")
const Task = require("../models/Task")

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞–º–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π AI –∞–≥–µ–Ω—Ç

const botExecutor = require("./botExecutor")
const Bot = require("../models/Bot")
const BotSession = require("../models/BotSession")

class AIAgent {
  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    this.systemPrompt = `
–¢—ã - AI –∞–≥–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Bitcoin Cash —Ñ–∞—É–∫–µ—Ç–∞. –¢–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏:

–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
- –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–ö–û–î–ï–†:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
- –û—Ç–ª–∞–¥–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞

–ü–û–ú–û–©–ù–ò–ö:
- –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –û–±—É—á–µ–Ω–∏–µ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/users [query] - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/ban [userId] - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban [userId] - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/balance [userId] [amount] - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/code [request] - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
/optimize [code] - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
/debug [error] - –ø–æ–º–æ—á—å —Å –æ—Ç–ª–∞–¥–∫–æ–π
/task [create/edit/delete] - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
`
  }

  async processMessage(message, userId, isAdmin = false) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (message.startsWith("/")) {
        return await this.handleCommand(message, userId, isAdmin)
      }

      // –û–±—ã—á–Ω—ã–π —á–∞—Ç —Å AI
      const response = await this.openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          { role: "system", content: this.systemPrompt },
          { role: "user", content: message },
        ],
        max_tokens: 1000,
        temperature: 0.7,
      })

      return {
        success: true,
        message: response.choices[0].message.content,
        type: "chat",
      }
    } catch (error) {
      console.error("AI Agent error:", error)
      return {
        success: false,
        message: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        type: "error",
      }
    }
  }

  async handleCommand(command, userId, isAdmin) {
    const [cmd, ...args] = command.split(" ")

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    const adminCommands = ["/ban", "/unban", "/balance", "/users", "/task"]
    if (adminCommands.includes(cmd) && !isAdmin) {
      return {
        success: false,
        message: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã",
        type: "error",
      }
    }

    switch (cmd) {
      case "/stats":
        return await this.getStats()

      case "/users":
        return await this.findUsers(args.join(" "))

      case "/ban":
        return await this.banUser(args[0])

      case "/unban":
        return await this.unbanUser(args[0])

      case "/balance":
        return await this.updateBalance(args[0], Number.parseFloat(args[1]))

      case "/code":
        return await this.generateCode(args.join(" "))

      case "/optimize":
        return await this.optimizeCode(args.join(" "))

      case "/debug":
        return await this.debugError(args.join(" "))

      case "/task":
        return await this.manageTask(args[0], args.slice(1))

      case "/help":
        return this.getHelp()

      case "/bot":
        return await this.manageBots(args, isAdmin)

      case "/session":
        return await this.manageSessions(args, isAdmin)

      case "/captcha":
        return await this.manageCaptcha(args, isAdmin)

      case "/human":
        return await this.simulateHuman(args, isAdmin)

      default:
        return {
          success: false,
          message: "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
          type: "error",
        }
    }
  }

  async manageBots(args, isAdmin) {
    if (!isAdmin) {
      return {
        success: false,
        message: "‚ùå –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        type: "error",
      }
    }

    const [action, ...params] = args

    switch (action) {
      case "list":
        const bots = await Bot.find().select("name type status stats")
        let message = "ü§ñ **–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤:**\n\n"

        bots.forEach((bot) => {
          const statusIcon = bot.status === "active" ? "‚úÖ" : "‚è∏Ô∏è"
          message += `${statusIcon} **${bot.name}** (${bot.type})\n`
          message += `‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: ${bot.stats.totalRequests}\n`
          message += `‚Ä¢ –î–æ—Ö–æ–¥: $${bot.stats.earnings.toFixed(4)}\n\n`
        })

        return {
          success: true,
          message,
          type: "bots",
        }

      case "start":
        const botId = params[0]
        if (!botId) {
          return {
            success: false,
            message: "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –±–æ—Ç–∞",
            type: "error",
          }
        }

        const bot = await Bot.findById(botId)
        if (!bot) {
          return {
            success: false,
            message: "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            type: "error",
          }
        }

        bot.status = "active"
        await bot.save()

        return {
          success: true,
          message: `‚úÖ –ë–æ—Ç ${bot.name} –∑–∞–ø—É—â–µ–Ω`,
          type: "admin",
        }

      case "stop":
        const stopBotId = params[0]
        const stopBot = await Bot.findById(stopBotId)
        if (stopBot) {
          stopBot.status = "stopped"
          await stopBot.save()
        }

        return {
          success: true,
          message: `‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`,
          type: "admin",
        }

      default:
        return {
          success: false,
          message: "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: list, start, stop",
          type: "error",
        }
    }
  }

  async manageSessions(args, isAdmin) {
    if (!isAdmin) {
      return {
        success: false,
        message: "‚ùå –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        type: "error",
      }
    }

    const [action, ...params] = args

    switch (action) {
      case "create":
        const [botId, sessionName] = params
        if (!botId || !sessionName) {
          return {
            success: false,
            message: "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –±–æ—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏",
            type: "error",
          }
        }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–µ—Å—Å–∏—é —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        const basicActions = [
          {
            actionType: "navigate",
            target: { url: "https://example.com" },
            parameters: { humanLike: true },
          },
          {
            actionType: "wait",
            parameters: { duration: 3000 },
          },
          {
            actionType: "human_behavior",
            parameters: { duration: 5000 },
          },
        ]

        const session = await botExecutor.createSession(botId, sessionName, basicActions)

        return {
          success: true,
          message: `‚úÖ –°–µ—Å—Å–∏—è "${sessionName}" —Å–æ–∑–¥–∞–Ω–∞\nID: ${session._id}`,
          type: "admin",
        }

      case "execute":
        const sessionId = params[0]
        if (!sessionId) {
          return {
            success: false,
            message: "‚ùì –£–∫–∞–∂–∏—Ç–µ ID —Å–µ—Å—Å–∏–∏",
            type: "error",
          }
        }

        botExecutor.executeSession(sessionId).catch(console.error)

        return {
          success: true,
          message: `‚ñ∂Ô∏è –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: ${sessionId}`,
          type: "admin",
        }

      case "status":
        const statusSessionId = params[0]
        const session = await BotSession.findById(statusSessionId)

        if (!session) {
          return {
            success: false,
            message: "‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            type: "error",
          }
        }

        const progress = (session.currentActionIndex / session.actions.length) * 100

        return {
          success: true,
          message: `üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:**\n\n‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${session.sessionName}\n‚Ä¢ –°—Ç–∞—Ç—É—Å: ${session.status}\n‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: ${Math.round(progress)}%\n‚Ä¢ –ß–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å: ${session.statistics.humanScore}/100`,
          type: "admin",
        }

      default:
        return {
          success: false,
          message: "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: create, execute, status",
          type: "error",
        }
    }
  }

  async manageCaptcha(args, isAdmin) {
    if (!isAdmin) {
      return {
        success: false,
        message: "‚ùå –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        type: "error",
      }
    }

    const [action, ...params] = args

    switch (action) {
      case "balance":
        const captchaSolver = require("./captchaSolver")
        const balance = await captchaSolver.getBalance("2captcha")

        return {
          success: true,
          message: `üí∞ **–ë–∞–ª–∞–Ω—Å –∫–∞–ø—á–∏:** $${balance || "N/A"}`,
          type: "admin",
        }

      case "solve":
        const [type, ...captchaParams] = params
        if (!type) {
          return {
            success: false,
            message: "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–∞–ø—á–∏: recaptcha_v2, hcaptcha, image",
            type: "error",
          }
        }

        return {
          success: true,
          message: `üîÑ –†–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ —Ç–∏–ø–∞ ${type} –∑–∞–ø—É—â–µ–Ω–æ...`,
          type: "admin",
        }

      default:
        return {
          success: false,
          message: "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: balance, solve",
          type: "error",
        }
    }
  }

  async simulateHuman(args, isAdmin) {
    if (!isAdmin) {
      return {
        success: false,
        message: "‚ùå –ù—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        type: "error",
      }
    }

    const [action, ...params] = args

    switch (action) {
      case "click":
        const [x, y] = params
        if (!x || !y) {
          return {
            success: false,
            message: "‚ùì –£–∫–∞–∂–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: /human click 100 200",
            type: "error",
          }
        }

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫
        return {
          success: true,
          message: `üñ±Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (${x}, ${y})`,
          type: "admin",
        }

      case "type":
        const text = params.join(" ")
        if (!text) {
          return {
            success: false,
            message: "‚ùì –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞",
            type: "error",
          }
        }

        return {
          success: true,
          message: `‚å®Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞: "${text}"`,
          type: "admin",
        }

      case "scroll":
        const amount = params[0] || "300"
        return {
          success: true,
          message: `üìú –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –Ω–∞ ${amount}px`,
          type: "admin",
        }

      default:
        return {
          success: false,
          message: "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: click, type, scroll",
          type: "error",
        }
    }
  }

  getHelp() {
    return {
      success: true,
      message: `ü§ñ **AI –ê–≥–µ–Ω—Ç-–ü–æ–º–æ—â–Ω–∏–∫**

**üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
‚Ä¢ \`/stats\` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞—É–∫–µ—Ç–∞

**üë• –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò:**
‚Ä¢ \`/users [–∑–∞–ø—Ä–æ—Å]\` - –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ \`/ban [userId]\` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ \`/unban [userId]\` - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ \`/balance [userId] [—Å—É–º–º–∞]\` - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å

**ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–û–¢–ê–ú–ò:**
‚Ä¢ \`/bot list\` - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
‚Ä¢ \`/bot start [botId]\` - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
‚Ä¢ \`/bot stop [botId]\` - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞

**üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–°–°–ò–Ø–ú–ò:**
‚Ä¢ \`/session create [botId] [–Ω–∞–∑–≤–∞–Ω–∏–µ]\` - —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
‚Ä¢ \`/session execute [sessionId]\` - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
‚Ä¢ \`/session status [sessionId]\` - —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏

**üîê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ü–ß–ï–ô:**
‚Ä¢ \`/captcha balance\` - –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ø—á–∏
‚Ä¢ \`/captcha solve [—Ç–∏–ø]\` - —Ä–µ—à–∏—Ç—å –∫–∞–ø—á—É

**üë§ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ß–ï–õ–û–í–ï–ö–ê:**
‚Ä¢ \`/human click [x] [y]\` - —Å–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–∞
‚Ä¢ \`/human type [—Ç–µ–∫—Å—Ç]\` - —Å–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞
‚Ä¢ \`/human scroll [–ø–∏–∫—Å–µ–ª–∏]\` - —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

**üíª –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï:**
‚Ä¢ \`/code [–æ–ø–∏—Å–∞–Ω–∏–µ]\` - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚Ä¢ \`/optimize [–∫–æ–¥]\` - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚Ä¢ \`/debug [–æ—à–∏–±–∫–∞]\` - –ø–æ–º–æ—á—å —Å –æ—Ç–ª–∞–¥–∫–æ–π

**üí¨ –û–ë–©–ï–ù–ò–ï:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ —Å AI.

–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞–º–∏ –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º! üöÄ`,
      type: "help",
    }
  }
}

module.exports = new AIAgent()
